name: Deploy IT-ERA Admin Authentication

on:
  push:
    branches:
      - production
      - main
    paths:
      - 'api/src/auth/**'
      - 'api/wrangler-auth.toml'
      - 'admin/**'
      - '.github/workflows/deploy-admin-auth.yml'
  
  pull_request:
    branches:
      - production
      - main
    paths:
      - 'api/src/auth/**'
      - 'api/wrangler-auth.toml'
      - 'admin/**'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Authentication Worker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'

      - name: Install dependencies
        working-directory: ./api
        run: npm ci

      - name: Lint authentication worker
        working-directory: ./api
        run: |
          npx eslint src/auth/auth-worker.js --fix || true
          echo "‚úÖ Linting completed"

      - name: Validate wrangler configuration
        working-directory: ./api
        run: |
          npx wrangler validate --config wrangler-auth.toml
          echo "‚úÖ Wrangler config validated"

  deploy-auth-worker:
    name: Deploy Authentication Worker
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/production' || github.ref == 'refs/heads/main'
    environment:
      name: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
      url: ${{ steps.deploy.outputs.deployment-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'

      - name: Install dependencies
        working-directory: ./api
        run: npm ci

      - name: Deploy to Cloudflare Workers
        id: deploy
        working-directory: ./api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          ENVIRONMENT=${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
          echo "Deploying to $ENVIRONMENT environment..."
          
          DEPLOYMENT_OUTPUT=$(npx wrangler deploy --config wrangler-auth.toml --env $ENVIRONMENT)
          echo "$DEPLOYMENT_OUTPUT"
          
          # Extract deployment URL
          DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -o 'https://[^[:space:]]*\.workers\.dev' | head -1)
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Authentication worker deployed to: $DEPLOYMENT_URL"

      - name: Set JWT Secret
        working-directory: ./api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          ENVIRONMENT=${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
          if [ "$ENVIRONMENT" = "production" ]; then
            echo "${{ secrets.JWT_SECRET_PRODUCTION }}" | npx wrangler secret put JWT_SECRET --env production
          else
            echo "${{ secrets.JWT_SECRET_DEVELOPMENT }}" | npx wrangler secret put JWT_SECRET --env development
          fi
          echo "‚úÖ JWT secret configured"

      - name: Test deployment
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"
          if [ -n "$DEPLOYMENT_URL" ]; then
            echo "Testing deployment at: $DEPLOYMENT_URL"
            
            # Test CORS preflight
            CORS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X OPTIONS "$DEPLOYMENT_URL/admin/api/auth/login")
            if [ "$CORS_RESPONSE" = "200" ]; then
              echo "‚úÖ CORS preflight successful"
            else
              echo "‚ùå CORS preflight failed: $CORS_RESPONSE"
            fi
            
            # Test health check endpoint
            HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/admin/api/auth/verify")
            if [ "$HEALTH_RESPONSE" = "401" ]; then
              echo "‚úÖ Auth endpoint responding correctly (401 without token)"
            else
              echo "‚ö†Ô∏è  Auth endpoint response: $HEALTH_RESPONSE"
            fi
          else
            echo "‚ùå No deployment URL found"
            exit 1
          fi

  notify-completion:
    name: Notify Deployment Completion
    runs-on: ubuntu-latest
    needs: [deploy-auth-worker]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy-auth-worker.result == 'success'
        run: |
          echo "üöÄ IT-ERA Admin Authentication Deployment Successful!"
          echo "Environment: ${{ github.ref == 'refs/heads/production' && 'Production' || 'Development' }}"
          echo "Deployment URL: ${{ needs.deploy-auth-worker.outputs.deployment-url }}"
          
      - name: Notify failure
        if: needs.deploy-auth-worker.result == 'failure'
        run: |
          echo "‚ùå IT-ERA Admin Authentication Deployment Failed!"
          exit 1