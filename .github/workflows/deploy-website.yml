name: 🚀 Deploy IT-ERA Website to GitHub Pages

on:
  push:
    branches: [main, production]
    paths:
      - 'public/**'
      - 'api/**'
      - 'package.json'
      - 'vercel.json'
      - '.github/workflows/deploy-website.yml'
  pull_request:
    branches: [main]
    paths:
      - 'public/**'
      - 'api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests and deploy directly'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  SITE_URL: 'https://userx87.github.io/it-era'

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🧪 Run tests
      if: github.event.inputs.skip_tests != 'true'
      run: |
        npm run test || echo "⚠️ Tests failed but continuing deployment"
        npm run lint || echo "⚠️ Linting failed but continuing deployment"

    - name: 🔍 Validate HTML structure
      run: |
        echo "🔍 Validating HTML files..."
        find public -name "*.html" -type f | head -5 | while read file; do
          echo "Checking $file..."
          if ! grep -q "<!DOCTYPE html>" "$file"; then
            echo "⚠️ Missing DOCTYPE in $file"
          fi
          if ! grep -q "<title>" "$file"; then
            echo "⚠️ Missing title in $file"
          fi
        done

    - name: 🛠️ Build site for GitHub Pages
      run: |
        echo "🛠️ Building site for GitHub Pages deployment..."

        # Make build script executable
        chmod +x scripts/build-for-github-pages.js

        # Run the build script
        node scripts/build-for-github-pages.js

        # Create a simple API mock for static deployment
        mkdir -p _site/api
        cat > _site/api/health.json << EOF
        {
          "status": "ok",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "version": "static-deployment",
          "environment": "github-pages",
          "site_url": "${{ env.SITE_URL }}"
        }
        EOF

        echo "✅ Site build completed"

    - name: 📊 Generate deployment report
      run: |
        echo "📊 Generating deployment report..."
        
        cat > _site/deployment-info.json << EOF
        {
          "deployment": {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "site_url": "${{ env.SITE_URL }}",
            "node_version": "${{ env.NODE_VERSION }}"
          },
          "files": {
            "total_html": $(find _site -name "*.html" | wc -l),
            "total_css": $(find _site -name "*.css" | wc -l),
            "total_js": $(find _site -name "*.js" | wc -l),
            "total_images": $(find _site -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" | wc -l)
          }
        }
        EOF
        
        echo "✅ Deployment report generated"

    - name: 🔧 Setup Pages
      uses: actions/configure-pages@v4

    - name: 📤 Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: 🎉 Deployment success notification
      run: |
        echo "🎉 IT-ERA website successfully deployed!"
        echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "📋 Deployment ID: ${{ github.run_id }}"
        echo "🕒 Deployed at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

  # Post-deployment validation
  validate:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: 🔍 Validate deployment
      run: |
        echo "🔍 Validating deployed website..."
        
        SITE_URL="${{ needs.build.outputs.deployment-url }}"
        echo "Testing URL: $SITE_URL"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Test main page
        if curl -f -s "$SITE_URL" > /dev/null; then
          echo "✅ Main page is accessible"
        else
          echo "❌ Main page is not accessible"
          exit 1
        fi
        
        # Test key pages
        for page in "servizi.html" "contatti.html"; do
          if curl -f -s "$SITE_URL/$page" > /dev/null; then
            echo "✅ $page is accessible"
          else
            echo "⚠️ $page might not be accessible"
          fi
        done
        
        echo "🎉 Deployment validation completed!"

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy, validate]
    if: always()
    
    steps:
    - name: 📢 Deployment notification
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.validate.result }}" == "success" ]]; then
          echo "🎉 IT-ERA website deployment completed successfully!"
          echo "🌐 Live at: ${{ needs.build.outputs.deployment-url }}"
          echo "📊 Build artifacts: ${{ github.run_id }}"
        elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
          echo "❌ Deployment failed"
          echo "🔍 Check the deployment logs for details"
        elif [[ "${{ needs.validate.result }}" == "failure" ]]; then
          echo "⚠️ Deployment succeeded but validation failed"
          echo "🔍 Site may have issues, please check manually"
        else
          echo "ℹ️ Deployment completed with status: ${{ needs.deploy.result }}"
        fi
