{
  "name": "IT-ERA â€¢ Blog Publish (Compat Core Nodes)",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "blog/publish",
        "responseMode": "responseNode"
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            { "name": "owner", "value": "OWNER_PLACEHOLDER" },
            { "name": "repo", "value": "REPO_PLACEHOLDER" },
            { "name": "branch", "value": "main" },
            { "name": "baseUrlDomain", "value": "https://it-era.pages.dev" }
          ]
        }
      },
      "name": "Config (owner/repo/branch)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [480, 300]
    },
    {
      "parameters": {
        "functionCode": "function S(v){return typeof v==='string'?v:(v==null?'':JSON.stringify(v));}\nconst d=items[0].json;\nfunction g(o,p){return p.split('.').reduce((x,k)=>(x||{})[k],o)}\n;['title','slug','content_html','meta','meta.title','meta.description'].forEach(k=>{if(!g(d,k)|| (typeof g(d,k)=='string' && g(d,k).trim()==='')){throw new Error('Missing '+k)}});\nconst tpl='<!doctype html>\n<html lang=\"it\">\n<head>\n  <meta charset=\"utf-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n  <title>{{mt}}</title>\n  <meta name=\"description\" content=\"{{md}}\"/>\n  <meta name=\"keywords\" content=\"{{mk}}\"/>\n  <link rel=\"canonical\" href=\"{{can}}\"/>\n  <script async src=\"https://www.googletagmanager.com/gtag/js?id={{GA}}\"></script>\n  <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag(\'js\',new Date());gtag(\'config\',\'{{GA}}\',{anonymize_ip:true});</script>\n  <script type=\"application/ld+json\">{{ld}}</script>\n  <script defer src=\"/static/js/tracking.js\"></script>\n</head>\n<body><main id=\"content\">{{html}}</main></body>\n</html>';\nconst kw=Array.isArray(d.meta&&d.meta.keywords)?d.meta.keywords.join(', '):S(d.meta&&d.meta.keywords||'');\nconst can=d.canonical || (d.baseUrlDomain + '/pages/blog/' + d.slug + '.html');\nconst ld=typeof d.schema_jsonld==='string'?d.schema_jsonld:JSON.stringify(d.schema_jsonld||{},null,2);\nlet out=tpl.replace('{{mt}}',S(d.meta.title)).replace('{{md}}',S(d.meta.description)).replace('{{mk}}',kw).replace('{{can}}',S(can)).replace('{{ld}}',ld).replace('{{html}}',S(d.content_html));\nout=out.replace(/\{\{GA\}\}/g,S(d.GA_MEASUREMENT_ID||''));\nconst path='pages/blog/'+d.slug+'.html';\nconst msg=d.commit_message||('feat(blog): publish '+d.slug);\nconst b64=Buffer.from(out,'utf8').toString('base64');\nreturn [{json:{...items[0].json,path,content_base64:b64,commit_message:msg,canonical:can}}];"
      },
      "name": "Render HTML (compat)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [780, 300]
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{$json.owner}}/{{$json.repo}}/contents/{{$json.path}}?ref={{$json.branch}}",
        "responseFormat": "json"
      },
      "name": "GitHub GET file (sha)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1040, 300]
    },
    {
      "parameters": {
        "functionCode": "const input=items[0].json;const prev=$items(\"GitHub GET file (sha)\",0,0).json||{};const sha=prev.sha;const body={message:input.commit_message,content:input.content_base64,branch:input.branch||'main'};if(sha)body.sha=sha;return [{json:{...input,requestBody:body}}];"
      },
      "name": "Build PUT body",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{$json.owner}}/{{$json.repo}}/contents/{{$json.path}}",
        "method": "PUT",
        "jsonParameters": true,
        "responseFormat": "json",
        "options": {
          "sendHeaders": true
        },
        "bodyParametersJson": "={{$json.requestBody}}",
        "headerParametersJson": "={\n  \"Accept\": \"application/vnd.github+json\",\n  \"Authorization\": \"Bearer {{$env.GITHUB_TOKEN}}\"\n}"
      },
      "name": "GitHub PUT file",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "responseBody": "={\n  \"status\": \"ok\",\n  \"url\": $json.canonical\n}"
      },
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1820, 300]
    }
  ],
  "connections": {
    "Webhook": { "main": [ [ { "node": "Config (owner/repo/branch)", "type": "main", "index": 0 } ] ] },
    "Config (owner/repo/branch)": { "main": [ [ { "node": "Render HTML (compat)", "type": "main", "index": 0 } ] ] },
    "Render HTML (compat)": { "main": [ [ { "node": "GitHub GET file (sha)", "type": "main", "index": 0 } ] ] },
    "GitHub GET file (sha)": { "main": [ [ { "node": "Build PUT body", "type": "main", "index": 0 } ] ] },
    "Build PUT body": { "main": [ [ { "node": "GitHub PUT file", "type": "main", "index": 0 } ] ] },
    "GitHub PUT file": { "main": [ [ { "node": "Respond", "type": "main", "index": 0 } ] ] }
  ],
  "settings": {},
  "pinData": {}
}

