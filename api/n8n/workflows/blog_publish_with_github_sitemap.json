{
  "name": "IT-ERA • Blog Publish + Sitemap (Webhook → Render HTML → GitHub Create/Update → Update sitemap.xml)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "blog/publish",
        "responseMode": "responseNode",
        "options": { "responseCode": 201 }
      },
      "id": "Webhook_1",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            { "name": "owner", "value": "OWNER_PLACEHOLDER" },
            { "name": "repo", "value": "REPO_PLACEHOLDER" },
            { "name": "branch", "value": "main" },
            { "name": "baseUrlDomain", "value": "https://it-era.it" },
            { "name": "sitemapPath", "value": "web/sitemap.xml" }
          ]
        }
      },
      "id": "Set_Config",
      "name": "Config (owner/repo/branch/domain/sitemap)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [480, 300]
    },
    {
      "parameters": {
        "functionCode": "// Render HTML with correct canonical fallback\nfunction ensureString(v) { return typeof v === 'string' ? v : (v == null ? '' : JSON.stringify(v)); }\n\nconst data = items[0].json;\n// Required fields validation\nconst required = ['title', 'slug', 'content_html', 'meta', 'meta.title', 'meta.description'];\nfunction pick(path) { return path.split('.').reduce((o,k)=> (o||{})[k], data); }\nfor (const key of required) { if (!pick(key) || (typeof pick(key) === 'string' && pick(key).trim() === '')) { throw new Error(`Missing required field: ${key}`); } }\n\nconst tpl = `<!doctype html>\n<html lang=\"it\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>{{meta.title}}</title>\n  <meta name=\"description\" content=\"{{meta.description}}\" />\n  <meta name=\"keywords\" content=\"{{meta.keywords}}\" />\n  <link rel=\"canonical\" href=\"{{canonical}}\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:title\" content=\"{{meta.title}}\" />\n  <meta property=\"og:description\" content=\"{{meta.description}}\" />\n  <meta property=\"og:url\" content=\"{{canonical}}\" />\n  <meta property=\"og:image\" content=\"{{cover.url}}\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta name=\"twitter:title\" content=\"{{meta.title}}\" />\n  <meta name=\"twitter:description\" content=\"{{meta.description}}\" />\n  <meta name=\"twitter:image\" content=\"{{cover.url}}\" />\n  <link rel=\"preconnect\" href=\"https://www.googletagmanager.com\" crossorigin>\n  <link rel=\"preconnect\" href=\"https://www.google-analytics.com\" crossorigin>\n  <link rel=\"preconnect\" href=\"https://cdn.jsdelivr.net\" crossorigin>\n  <link rel=\"preconnect\" href=\"https://cdnjs.cloudflare.com\" crossorigin>\n  <script async src=\"https://www.googletagmanager.com/gtag/js?id={{GA_MEASUREMENT_ID}}\"></script>\n  <script>\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);} \n    gtag('js', new Date());\n    gtag('config', '{{GA_MEASUREMENT_ID}}', { 'anonymize_ip': true });\n  </script>\n  <script type=\"application/ld+json\">{{schema_jsonld}}</script>\n  <script defer src=\"/static/js/tracking.js\"></script>\n  <style>body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; line-height: 1.6; color: #0f172a; } .container { max-width: 1100px; margin: 0 auto; padding: 24px; } article img { max-width: 100%; height: auto; }</style>\n</head>\n<body>\n  <main id=\"content\" class=\"container\">{{content_html}}</main>\n</body>\n</html>`;\n\nconst keywords = Array.isArray(data.meta?.keywords) ? data.meta.keywords.join(', ') : ensureString(data.meta?.keywords || '');\nconst schemaJson = typeof data.schema_jsonld === 'string' ? data.schema_jsonld : JSON.stringify(data.schema_jsonld || {}, null, 2);\n\nfunction replaceAll(t, find, replace) { return t.split(find).join(replace); }\nlet html = tpl;\nconst canonical = data.canonical || `${data.baseUrlDomain}/pages/blog/${data.slug}.html`;\nhtml = replaceAll(html, '{{meta.title}}', ensureString(data.meta.title));\nhtml = replaceAll(html, '{{meta.description}}', ensureString(data.meta.description));\nhtml = replaceAll(html, '{{meta.keywords}}', keywords);\nhtml = replaceAll(html, '{{canonical}}', ensureString(canonical));\nhtml = replaceAll(html, '{{cover.url}}', ensureString(data.cover?.url || ''));\nhtml = replaceAll(html, '{{schema_jsonld}}', schemaJson);\nhtml = replaceAll(html, '{{content_html}}', ensureString(data.content_html));\nconst gaId = data.GA_MEASUREMENT_ID || '';\nhtml = replaceAll(html, '{{GA_MEASUREMENT_ID}}', gaId);\n\nconst path = `pages/blog/${data.slug}.html`;\nconst commitMessage = data.commit_message || `feat(blog): publish ${data.slug}`;\nconst contentBase64 = Buffer.from(html, 'utf8').toString('base64');\n\nreturn [{ json: { ...items[0].json, canonical, path, content_base64: contentBase64, commit_message: commitMessage } }];"
      },
      "id": "Function_Render",
      "name": "Render HTML",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [780, 300]
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{$json.owner}}/{{$json.repo}}/contents/{{$json.path}}?ref={{$json.branch}}",
        "responseFormat": "json",
        "options": { "ignoreResponseCode": true }
      },
      "id": "HTTP_Get_SHA",
      "name": "GitHub GET file (sha)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1040, 300]
    },
    {
      "parameters": {
        "functionCode": "const input = items[0].json;\nlet sha = undefined;\nconst prev = $items(\"GitHub GET file (sha)\", 0, 0).json;\nif (prev && prev.sha) { sha = prev.sha; }\nconst body = { message: input.commit_message, content: input.content_base64, branch: input.branch || 'main' };\nif (sha) body.sha = sha;\nreturn [{ json: { ...input, requestBody: body } }];"
      },
      "id": "Function_PUT_Body",
      "name": "Build PUT body",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{$json.owner}}/{{$json.repo}}/contents/{{$json.path}}",
        "method": "PUT",
        "responseFormat": "json",
        "jsonParameters": true,
        "options": { "sendHeaders": true },
        "bodyParametersJson": "={{$json.requestBody}}",
        "headerParametersJson": "={\n  \"Accept\": \"application/vnd.github+json\",\n  \"Authorization\": \"Bearer {{$env.GITHUB_TOKEN}}\",\n  \"X-GitHub-Api-Version\": \"2022-11-28\"\n}"
      },
      "id": "HTTP_PUT_File",
      "name": "GitHub PUT file",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{$json.owner}}/{{$json.repo}}/contents/{{$json.sitemapPath}}?ref={{$json.branch}}",
        "responseFormat": "json",
        "options": { "ignoreResponseCode": true, "sendHeaders": true },
        "headerParametersJson": "={\n  \"Accept\": \"application/vnd.github+json\",\n  \"Authorization\": \"Bearer {{$env.GITHUB_TOKEN}}\",\n  \"X-GitHub-Api-Version\": \"2022-11-28\"\n}"
      },
      "id": "HTTP_Get_Sitemap",
      "name": "GitHub GET sitemap (sha+content)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1040, 560]
    },
    {
      "parameters": {
        "functionCode": "// Build/Update sitemap.xml content without regex to avoid escaping issues\nconst input = items[0].json;\nconst getResp = $items(\"GitHub GET sitemap (sha+content)\", 0, 0).json;\nlet existingXml = '';\nlet existingSha;\nif (getResp && getResp.content) {\n  try { existingXml = Buffer.from(getResp.content, 'base64').toString('utf8'); } catch (e) { existingXml = ''; }\n  existingSha = getResp.sha;\n}\nconst url = input.canonical || (input.baseUrlDomain + '/pages/blog/' + input.slug + '.html');\nconst today = new Date().toISOString().slice(0,10);\nfunction buildEntry(u, lastmod) {\n  return '  <url>\n' +\n         '    <loc>' + u + '</loc>\n' +\n         '    <lastmod>' + lastmod + '</lastmod>\n' +\n         '    <changefreq>weekly</changefreq>\n' +\n         '    <priority>0.7</priority>\n' +\n         '  </url>\n';\n}\nlet xml = existingXml || '';\nif (!xml.trim()) {\n  xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n' +\n        '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n' +\n        buildEntry(url, today) +\n        '</urlset>\n';\n} else {\n  const marker = '<loc>' + url + '</loc>';\n  const closeUrlset = '</urlset>';\n  if (xml.indexOf(marker) !== -1) {\n    const locPos = xml.indexOf(marker);\n    const lastmodOpen = xml.indexOf('<lastmod>', locPos);\n    const lastmodClose = xml.indexOf('</lastmod>', locPos);\n    if (lastmodOpen !== -1 && lastmodClose !== -1 && lastmodClose > lastmodOpen) {\n      const before = xml.slice(0, lastmodOpen + '<lastmod>'.length);\n      const after = xml.slice(lastmodClose);\n      xml = before + today + after;\n    } else {\n      const urlClose = xml.indexOf('</url>', locPos);\n      if (urlClose !== -1) {\n        const before = xml.slice(0, urlClose);\n        const after = xml.slice(urlClose);\n        xml = before + '\n    <lastmod>' + today + '</lastmod>' + after;\n      }\n    }\n  } else {\n    const pos = xml.lastIndexOf(closeUrlset);\n    if (pos !== -1) {\n      xml = xml.slice(0, pos) + buildEntry(url, today) + xml.slice(pos);\n    } else {\n      xml += buildEntry(url, today);\n    }\n  }\n}\nconst content_base64 = Buffer.from(xml, 'utf8').toString('base64');\nconst body = { message: (input.sitemap_commit_message || ('chore(sitemap): add/update ' + input.slug)), content: content_base64, branch: (input.branch || 'main') };\nif (existingSha) body.sha = existingSha;\nreturn [{ json: { ...input, sitemapRequestBody: body } }];"
      },
      "id": "Function_Build_Sitemap",
      "name": "Build sitemap PUT body",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1300, 560]
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{$json.owner}}/{{$json.repo}}/contents/{{$json.sitemapPath}}",
        "method": "PUT",
        "responseFormat": "json",
        "jsonParameters": true,
        "options": { "sendHeaders": true },
        "bodyParametersJson": "={{$json.sitemapRequestBody}}",
        "headerParametersJson": "={\n  \"Accept\": \"application/vnd.github+json\",\n  \"Authorization\": \"Bearer {{$env.GITHUB_TOKEN}}\",\n  \"X-GitHub-Api-Version\": \"2022-11-28\"\n}"
      },
      "id": "HTTP_PUT_Sitemap",
      "name": "GitHub PUT sitemap.xml",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 560]
    },
    {
      "parameters": {
        "responseBody": "={\n  \"status\": \"ok\",\n  \"path\": $json.path,\n  \"branch\": $json.branch,\n  \"repo\": $json.repo,\n  \"owner\": $json.owner,\n  \"url\": $json.canonical || ($json.baseUrlDomain + '/pages/blog/' + $json.slug + '.html'),\n  \"sitemap\": { \"path\": $json.sitemapPath, \"updated\": true }\n}",
        "responseCode": 201,
        "options": {}
      },
      "id": "Respond_201",
      "name": "Respond 201",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1820, 420]
    }
  ],
  "connections": {
    "Webhook": { "main": [ [ { "node": "Config (owner/repo/branch/domain/sitemap)", "type": "main", "index": 0 } ] ] },
    "Config (owner/repo/branch/domain/sitemap)": { "main": [ [ { "node": "Render HTML", "type": "main", "index": 0 } ] ] },
    "Render HTML": { "main": [ [ { "node": "GitHub GET file (sha)", "type": "main", "index": 0 } ] ] },
    "GitHub GET file (sha)": { "main": [ [ { "node": "Build PUT body", "type": "main", "index": 0 } ] ] },
    "Build PUT body": { "main": [ [ { "node": "GitHub PUT file", "type": "main", "index": 0 } ] ] },
    "GitHub PUT file": { "main": [ [ { "node": "GitHub GET sitemap (sha+content)", "type": "main", "index": 0 } ] ] },
    "GitHub GET sitemap (sha+content)": { "main": [ [ { "node": "Build sitemap PUT body", "type": "main", "index": 0 } ] ] },
    "Build sitemap PUT body": { "main": [ [ { "node": "GitHub PUT sitemap.xml", "type": "main", "index": 0 } ] ] },
    "GitHub PUT sitemap.xml": { "main": [ [ { "node": "Respond 201", "type": "main", "index": 0 } ] ] }
  },
  "active": false,
  "settings": {},
  "pinData": {},
  "version": 2
}

