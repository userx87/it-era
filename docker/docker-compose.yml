# IT-ERA Docker Compose Configuration
# Orchestrazione completa dell'ecosistema IT-ERA

version: '3.8'

services:
  # Servizio principale IT-ERA
  it-era-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: it-era-main
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - FLASK_APP=web/app.py
      - IT_ERA_DB_PATH=/app/it-era/database/it_era.db
      - PYTHONPATH=/app/it-era
    volumes:
      - ../database:/app/it-era/database
      - ../logs:/app/it-era/logs
      - ../config:/app/it-era/config
      - ../web:/app/it-era/web
      - backup_data:/app/it-era/backups
    ports:
      - "5000:5000"
    networks:
      - it-era-network
    depends_on:
      - mariadb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database MariaDB (opzionale, per deployment piÃ¹ robusti)
  mariadb:
    image: mariadb:10.11
    container_name: it-era-mariadb
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-itera_root_2024}
      - MYSQL_DATABASE=it_era
      - MYSQL_USER=itera_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-itera_pass_2024}
    volumes:
      - mariadb_data:/var/lib/mysql
      - ../database/mysql_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "3306:3306"
    networks:
      - it-era-network
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M

  # Worker per automazioni background
  it-era-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: it-era-worker
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/it-era
      - WORKER_MODE=true
    volumes:
      - ../database:/app/it-era/database
      - ../logs:/app/it-era/logs
      - ../config:/app/it-era/config
      - backup_data:/app/it-era/backups
    networks:
      - it-era-network
    depends_on:
      - it-era-app
    command: ["worker"]

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: it-era-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../web/static:/var/www/static:ro
      - ssl_certs:/etc/nginx/ssl
    networks:
      - it-era-network
    depends_on:
      - it-era-app

  # Redis per caching (opzionale)
  redis:
    image: redis:7-alpine
    container_name: it-era-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-itera_redis_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - it-era-network

  # Monitoring con Prometheus (opzionale)
  prometheus:
    image: prom/prometheus:latest
    container_name: it-era-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - it-era-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana per dashboard (opzionale)
  grafana:
    image: grafana/grafana:latest
    container_name: it-era-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/it-era.json
    networks:
      - it-era-network
    depends_on:
      - prometheus

networks:
  it-era-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mariadb_data:
    driver: local
  backup_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ssl_certs:
    driver: local
