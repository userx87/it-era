class ITERAAnalyticsSystem{constructor(){this.config={enabled: true,realTimeTracking: true,batchSize: 20,flushInterval: 30000,retentionDays: 90,endpoints:{events: '/api/analytics/events',conversations: '/api/analytics/conversations',performance: '/api/analytics/performance',insights: '/api/analytics/insights'}};this.storage={events: [],conversations: new Map(),performance: [],sessions: new Map(),insights:{daily:{},weekly:{},monthly:{}}};this.metrics={totalConversations: 0,totalMessages: 0,averageResponseTime: 0,urgentConversations: 0,sectorDistribution:{medical: 0,legal: 0,general: 0},sentimentDistribution:{positive: 0,negative: 0,neutral: 0,urgent: 0},conversionRate: 0,satisfactionScore: 0};this.init()}init(){console.log('📊 IT-ERA Analytics System initializing...');this.setupPeriodicFlush();this.setupRealTimeMonitoring();this.integrateWithAI();this.integrateWithChatbot();this.setupCleanup();console.log('✅ IT-ERA Analytics System initialized')}trackEvent(eventType,data={}){if(!this.config.enabled)return;const event={id: this.generateEventId(),type: eventType,timestamp: Date.now(),sessionId: this.getCurrentSessionId(),data:{...data,userAgent: navigator.userAgent,url: window.location.href,referrer: document.referrer}};this.storage.events.push(event);this.updateRealTimeMetrics(event);if(this.isCriticalEvent(eventType)){this.processCriticalEvent(event)}console.log('📈 Event tracked:',eventType,data)}trackConversation(conversationData){const sessionId=conversationData.sessionId||this.getCurrentSessionId();if(!this.storage.conversations.has(sessionId)){this.storage.conversations.set(sessionId,{id: sessionId,startTime: Date.now(),messages: [],analysis:{},outcome: null,satisfaction: null});this.metrics.totalConversations++}const conversation=this.storage.conversations.get(sessionId);if(conversationData.message){conversation.messages.push({timestamp: Date.now(),content: conversationData.message,type: conversationData.messageType||'user',analysis: conversationData.analysis||{}});this.metrics.totalMessages++}if(conversationData.analysis){conversation.analysis={...conversation.analysis,...conversationData.analysis};if(conversationData.analysis.sector){this.metrics.sectorDistribution[conversationData.analysis.sector]++}if(conversationData.analysis.sentiment){this.metrics.sentimentDistribution[conversationData.analysis.sentiment]++}if(conversationData.analysis.urgencyLevel==='critical'){this.metrics.urgentConversations++}}if(conversationData.outcome){conversation.outcome=conversationData.outcome}if(conversationData.satisfaction){conversation.satisfaction=conversationData.satisfaction;this.updateSatisfactionScore(conversationData.satisfaction)}conversation.lastUpdate=Date.now()}trackPerformance(performanceData){const performance={timestamp: Date.now(),sessionId: this.getCurrentSessionId(),...performanceData};this.storage.performance.push(performance);if(performanceData.responseTime){const totalResponseTime=this.metrics.averageResponseTime*(this.metrics.totalMessages-1);this.metrics.averageResponseTime=(totalResponseTime+performanceData.responseTime)/this.metrics.totalMessages}if(this.storage.performance.length>1000){this.storage.performance=this.storage.performance.slice(-500)}}trackSentiment(message,sentiment,confidence){this.trackEvent('sentiment_analysis',{message: message.substring(0,100),sentiment,confidence,messageLength: message.length})}generateInsights(){const now=new Date();const today=now.toISOString().split('T')[0];if(!this.storage.insights.daily[today]){this.storage.insights.daily[today]=this.calculateDailyInsights()}if(now.getDay()===0){const weekKey=this.getWeekKey(now);if(!this.storage.insights.weekly[weekKey]){this.storage.insights.weekly[weekKey]=this.calculateWeeklyInsights()}}if(now.getDate()===1){const monthKey=`${now.getFullYear()}-${String(now.getMonth()+1).padStart(2,'0')}`;if(!this.storage.insights.monthly[monthKey]){this.storage.insights.monthly[monthKey]=this.calculateMonthlyInsights()}}return{daily: this.storage.insights.daily[today],realTime: this.metrics}}calculateDailyInsights(){const today=new Date().toISOString().split('T')[0];const todayEvents=this.storage.events.filter(event=>new Date(event.timestamp).toISOString().split('T')[0]===today);return{totalEvents: todayEvents.length,conversationsStarted: todayEvents.filter(e=>e.type==='conversation_started').length,emergenciesDetected: todayEvents.filter(e=>e.type==='emergency_triggered').length,averageResponseTime: this.calculateAverageResponseTime(todayEvents),topSectors: this.getTopSectors(todayEvents),sentimentBreakdown: this.getSentimentBreakdown(todayEvents),peakHours: this.getPeakHours(todayEvents)}}calculateWeeklyInsights(){return{conversationTrends: this.getConversationTrends('week'),sectorGrowth: this.getSectorGrowth('week'),performanceMetrics: this.getPerformanceMetrics('week'),userSatisfaction: this.getUserSatisfaction('week')}}calculateMonthlyInsights(){return{businessImpact: this.getBusinessImpact('month'),aiPerformance: this.getAIPerformance('month'),sectorAnalysis: this.getSectorAnalysis('month'),recommendations: this.generateRecommendations('month')}}setupRealTimeMonitoring(){setInterval(()=>{this.checkCriticalMetrics()},5000)}checkCriticalMetrics(){const recentEvents=this.storage.events.filter(event=>Date.now()-event.timestamp<60000);const emergencies=recentEvents.filter(e=>e.type==='emergency_triggered');if(emergencies.length>3){this.alertHighEmergencyVolume(emergencies)}const errors=recentEvents.filter(e=>e.type==='ai_error');if(errors.length>5){this.alertHighErrorRate(errors)}}integrateWithAI(){if(window.ITERA_AI){const originalSendAnalytics=window.ITERA_AI.sendAnalytics;window.ITERA_AI.sendAnalytics=(eventType,data)=>{this.trackEvent(eventType,data);if(originalSendAnalytics){originalSendAnalytics.call(window.ITERA_AI,eventType,data)}}}}integrateWithChatbot(){if(window.ITERASmartChatbot){const originalTrackEvent=window.ITERASmartChatbot.prototype.trackEvent;window.ITERASmartChatbot.prototype.trackEvent=function(eventName,data){window.ITERAAnalytics.trackEvent(eventName,data);if(originalTrackEvent){originalTrackEvent.call(this,eventName,data)}}}}generateEventId(){return 'evt_'+Date.now()+'_'+Math.random().toString(36).substr(2,9)}getCurrentSessionId(){if(!this.currentSessionId){this.currentSessionId='sess_'+Date.now()+'_'+Math.random().toString(36).substr(2,9)}return this.currentSessionId}isCriticalEvent(eventType){return ['emergency_triggered','ai_error','system_failure'].includes(eventType)}processCriticalEvent(event){console.warn('🚨 Critical event detected:',event);this.sendImmediateAlert(event)}sendImmediateAlert(event){console.log('📢 Immediate alert sent for:',event.type)}updateRealTimeMetrics(event){if(event.type==='conversation_started'){this.metrics.totalConversations++}if(event.type==='message_sent'){this.metrics.totalMessages++}}updateSatisfactionScore(satisfaction){const currentScore=this.metrics.satisfactionScore;const totalConversations=this.metrics.totalConversations;this.metrics.satisfactionScore=((currentScore*(totalConversations-1))+satisfaction)/totalConversations}setupPeriodicFlush(){setInterval(()=>{this.flushData()},this.config.flushInterval)}async flushData(){if(this.storage.events.length===0)return;try{await this.sendToServer('events',this.storage.events);const conversationsArray=Array.from(this.storage.conversations.values());if(conversationsArray.length>0){await this.sendToServer('conversations',conversationsArray)}if(this.storage.performance.length>0){await this.sendToServer('performance',this.storage.performance)}this.storage.events=[];this.storage.performance=[];console.log('📤 Analytics data flushed to server')}catch(error){console.error('❌ Failed to flush analytics data:',error)}}async sendToServer(endpoint,data){const url=this.config.endpoints[endpoint];if(!url)return;const response=await fetch(url,{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify({data,timestamp: Date.now()})});if(!response.ok){throw new Error(`Analytics server error: ${response.status}`)}}setupCleanup(){setInterval(()=>{this.cleanupOldData()},3600000)}cleanupOldData(){const cutoffTime=Date.now()-(this.config.retentionDays*24*60*60*1000);this.storage.events=this.storage.events.filter(event=>event.timestamp>cutoffTime);for(const [sessionId,conversation] of this.storage.conversations.entries()){if(conversation.lastUpdate<cutoffTime){this.storage.conversations.delete(sessionId)}}console.log('🧹 Old analytics data cleaned up')}getMetrics(){return{...this.metrics}}getInsights(){return this.generateInsights()}exportData(format='json'){const data={metrics: this.metrics,events: this.storage.events,conversations: Array.from(this.storage.conversations.values()),performance: this.storage.performance,insights: this.storage.insights};if(format==='csv'){return this.convertToCSV(data)}return JSON.stringify(data,null,2)}}window.ITERAAnalytics=new ITERAAnalyticsSystem();window.ITERAAnalytics.api={track:(event,data)=>window.ITERAAnalytics.trackEvent(event,data),getMetrics:()=>window.ITERAAnalytics.getMetrics(),getInsights:()=>window.ITERAAnalytics.getInsights(),export:(format)=>window.ITERAAnalytics.exportData(format)};if(typeof module!=='undefined'&&module.exports){module.exports=ITERAAnalyticsSystem}console.log('📊 IT-ERA Advanced Analytics System loaded');