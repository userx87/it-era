name: üîÑ Continuous Production Monitoring

on:
  schedule:
    # Every 5 minutes during business hours (8 AM - 8 PM CET)
    - cron: '*/5 8-20 * * 1-5'
    # Every 15 minutes during off hours
    - cron: '*/15 21-7 * * *'
    - cron: '*/15 * * * 0,6'
  workflow_dispatch:
    inputs:
      alert_level:
        description: 'Alert Level'
        required: false
        default: 'normal'
        type: choice
        options:
          - normal
          - critical
          - emergency

env:
  CHATBOT_API_PROD: 'https://it-era-chatbot-prod.bulltech.workers.dev'
  EMAIL_API_PROD: 'https://it-era-email.bulltech.workers.dev'
  TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK_URL }}
  ALERT_LEVEL: ${{ github.event.inputs.alert_level || 'normal' }}

jobs:
  # ===============================
  # RAPID HEALTH CHECK
  # ===============================
  rapid-health-check:
    name: ‚ö° Rapid System Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    outputs:
      chatbot_status: ${{ steps.health-check.outputs.chatbot_status }}
      email_status: ${{ steps.health-check.outputs.email_status }}
      overall_health: ${{ steps.health-check.outputs.overall_health }}
      response_times: ${{ steps.health-check.outputs.response_times }}

    steps:
      - name: ‚ö° Quick Health Assessment
        id: health-check
        run: |
          echo "üîç Starting rapid health assessment..."
          
          # Initialize status variables
          chatbot_status="unknown"
          email_status="unknown"
          overall_health="unknown"
          chatbot_time=0
          email_time=0
          
          # Test Chatbot API
          echo "ü§ñ Testing Chatbot API..."
          start_time=$(date +%s%3N)
          
          chatbot_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            --max-time 10 \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Origin: https://it-era.it" \
            -d '{"message":"health check","sessionId":"monitor-'$(date +%s)'"}' \
            "${{ env.CHATBOT_API_PROD }}/api/chat")
          
          end_time=$(date +%s%3N)
          chatbot_time=$((end_time - start_time))
          
          chatbot_http_code=$(echo $chatbot_response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          if [ "$chatbot_http_code" -eq 200 ]; then
            chatbot_status="healthy"
            echo "‚úÖ Chatbot API: Healthy (${chatbot_time}ms)"
          else
            chatbot_status="failed"
            echo "‚ùå Chatbot API: Failed (HTTP $chatbot_http_code)"
          fi
          
          # Test Email API
          echo "üìß Testing Email API..."
          start_time=$(date +%s%3N)
          
          email_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            --max-time 10 \
            -H "Origin: https://it-era.it" \
            "${{ env.EMAIL_API_PROD }}/api")
          
          end_time=$(date +%s%3N)
          email_time=$((end_time - start_time))
          
          email_http_code=$(echo $email_response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          if [ "$email_http_code" -eq 200 ]; then
            email_status="healthy"
            echo "‚úÖ Email API: Healthy (${email_time}ms)"
          else
            email_status="failed"
            echo "‚ùå Email API: Failed (HTTP $email_http_code)"
          fi
          
          # Determine overall health
          if [ "$chatbot_status" = "healthy" ] && [ "$email_status" = "healthy" ]; then
            overall_health="healthy"
            echo "‚úÖ Overall System: Healthy"
          else
            overall_health="degraded"
            echo "‚ö†Ô∏è Overall System: Degraded"
          fi
          
          # Set outputs
          echo "chatbot_status=$chatbot_status" >> $GITHUB_OUTPUT
          echo "email_status=$email_status" >> $GITHUB_OUTPUT
          echo "overall_health=$overall_health" >> $GITHUB_OUTPUT
          echo "response_times=Chatbot:${chatbot_time}ms,Email:${email_time}ms" >> $GITHUB_OUTPUT
          
          # Performance alerts
          if [ "$chatbot_time" -gt 5000 ]; then
            echo "‚ö†Ô∏è Chatbot API response time high: ${chatbot_time}ms"
          fi
          
          if [ "$email_time" -gt 3000 ]; then
            echo "‚ö†Ô∏è Email API response time high: ${email_time}ms"
          fi

  # ===============================
  # CHATBOT AVAILABILITY TEST
  # ===============================
  chatbot-availability:
    name: ü§ñ Chatbot Availability Test
    runs-on: ubuntu-latest
    needs: rapid-health-check
    if: needs.rapid-health-check.outputs.chatbot_status == 'healthy'

    steps:
      - name: üß™ Test Chatbot Functionality
        run: |
          echo "ü§ñ Testing chatbot with sample conversations..."
          
          test_messages=(
            "Ciao, come state?"
            "Avete assistenza per Windows?"
            "Quanto costa un intervento?"
            "Lavorate la domenica?"
          )
          
          failed_tests=0
          
          for message in "${test_messages[@]}"; do
            echo "üìù Testing: '$message'"
            
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              --max-time 15 \
              -X POST \
              -H "Content-Type: application/json" \
              -H "Origin: https://it-era.it" \
              -d "{\"message\":\"$message\",\"sessionId\":\"test-$(date +%s)-$RANDOM\"}" \
              "${{ env.CHATBOT_API_PROD }}/api/chat")
            
            http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
            
            if [ "$http_code" -eq 200 ]; then
              # Check if response contains actual content
              if [ ${#body} -gt 50 ]; then
                echo "‚úÖ Response received for: '$message'"
              else
                echo "‚ö†Ô∏è Short response for: '$message'"
                failed_tests=$((failed_tests + 1))
              fi
            else
              echo "‚ùå Failed for: '$message' (HTTP $http_code)"
              failed_tests=$((failed_tests + 1))
            fi
            
            sleep 2  # Rate limiting courtesy
          done
          
          if [ $failed_tests -gt 0 ]; then
            echo "‚ö†Ô∏è $failed_tests chatbot tests failed"
            exit 1
          else
            echo "‚úÖ All chatbot functionality tests passed"
          fi

  # ===============================
  # EMERGENCY DETECTION TEST
  # ===============================
  emergency-system-test:
    name: üö® Emergency Detection System Test
    runs-on: ubuntu-latest
    needs: rapid-health-check
    if: needs.rapid-health-check.outputs.overall_health == 'healthy'

    steps:
      - name: üö® Test Emergency Keywords Detection
        run: |
          echo "üö® Testing emergency detection system..."
          
          emergency_messages=(
            "EMERGENZA: il server √® down!"
            "URGENTE: non riesco ad accedere ai file"
            "CRITICO: sistema bloccato"
          )
          
          for msg in "${emergency_messages[@]}"; do
            echo "üîç Testing emergency message: '$msg'"
            
            response=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "Origin: https://it-era.it" \
              -d "{\"message\":\"$msg\",\"sessionId\":\"emergency-test-$(date +%s)\"}" \
              "${{ env.CHATBOT_API_PROD }}/api/chat")
            
            # Check if emergency was detected (look for escalation indicators)
            if echo "$response" | grep -i -q "emergenza\|urgente\|contattare\|039.*888.*2041"; then
              echo "‚úÖ Emergency detected for: '$msg'"
            else
              echo "‚ö†Ô∏è Emergency might not be properly detected for: '$msg'"
            fi
            
            sleep 3  # Allow time for webhook notifications
          done

  # ===============================
  # WIDGET DEPLOYMENT VERIFICATION
  # ===============================
  widget-deployment-check:
    name: üñ•Ô∏è Widget Deployment Verification
    runs-on: ubuntu-latest
    needs: rapid-health-check

    steps:
      - name: üîç Verify Widget on Key Pages
        run: |
          echo "üîç Checking chatbot widget deployment..."
          
          key_pages=(
            "https://it-era.it/"
            "https://it-era.it/pages/assistenza-it-milano.html"
            "https://it-era.it/pages/cloud-storage-como.html"
            "https://it-era.it/pages/sicurezza-informatica-bergamo.html"
          )
          
          failed_pages=0
          
          for page in "${key_pages[@]}"; do
            echo "üìÑ Checking: $page"
            
            response=$(curl -s --max-time 10 "$page")
            
            # Check for chatbot widget indicators
            if echo "$response" | grep -q -E "(chatbot|chat-widget|it-era-chatbot)" && \
               echo "$response" | grep -q -E "(bulltech\.workers\.dev|chatbot.*api)"; then
              echo "‚úÖ Chatbot widget found on: $page"
            else
              echo "‚ùå Chatbot widget missing on: $page"
              failed_pages=$((failed_pages + 1))
            fi
          done
          
          if [ $failed_pages -gt 0 ]; then
            echo "‚ö†Ô∏è Widget missing on $failed_pages pages"
          else
            echo "‚úÖ Widget deployed correctly on all key pages"
          fi

  # ===============================
  # ALERTING & NOTIFICATION
  # ===============================
  send-alerts:
    name: üîî Send Alerts
    runs-on: ubuntu-latest
    needs: [rapid-health-check, chatbot-availability, emergency-system-test, widget-deployment-check]
    if: always()

    steps:
      - name: üìä Evaluate System Status
        id: evaluate
        run: |
          chatbot_status="${{ needs.rapid-health-check.outputs.chatbot_status }}"
          email_status="${{ needs.rapid-health-check.outputs.email_status }}"
          overall_health="${{ needs.rapid-health-check.outputs.overall_health }}"
          
          # Determine alert level
          if [ "$overall_health" = "healthy" ]; then
            if [ "${{ needs.chatbot-availability.result }}" = "success" ] && \
               [ "${{ needs.emergency-system-test.result }}" = "success" ] && \
               [ "${{ needs.widget-deployment-check.result }}" = "success" ]; then
              alert_status="all_green"
              alert_color="28a745"
              alert_emoji="‚úÖ"
            else
              alert_status="minor_issues"
              alert_color="ffc107"
              alert_emoji="‚ö†Ô∏è"
            fi
          else
            alert_status="system_issues"
            alert_color="dc3545"
            alert_emoji="‚ùå"
          fi
          
          echo "alert_status=$alert_status" >> $GITHUB_OUTPUT
          echo "alert_color=$alert_color" >> $GITHUB_OUTPUT
          echo "alert_emoji=$alert_emoji" >> $GITHUB_OUTPUT

      - name: üì± Send Teams Notification
        if: |
          env.TEAMS_WEBHOOK != '' && 
          (steps.evaluate.outputs.alert_status != 'all_green' || 
           env.ALERT_LEVEL == 'critical' || 
           env.ALERT_LEVEL == 'emergency')
        run: |
          timestamp=$(date -u)
          alert_emoji="${{ steps.evaluate.outputs.alert_emoji }}"
          alert_status="${{ steps.evaluate.outputs.alert_status }}"
          
          # Create status summary
          status_summary=""
          if [ "${{ needs.rapid-health-check.outputs.chatbot_status }}" != "healthy" ]; then
            status_summary="$status_summaryü§ñ Chatbot API: Issues detected\n"
          fi
          if [ "${{ needs.rapid-health-check.outputs.email_status }}" != "healthy" ]; then
            status_summary="$status_summaryüìß Email API: Issues detected\n"
          fi
          if [ "${{ needs.chatbot-availability.result }}" != "success" ]; then
            status_summary="$status_summaryüîß Chatbot Functionality: Check required\n"
          fi
          if [ "${{ needs.emergency-system-test.result }}" != "success" ]; then
            status_summary="$status_summaryüö® Emergency System: Check required\n"
          fi
          if [ "${{ needs.widget-deployment-check.result }}" != "success" ]; then
            status_summary="$status_summaryüñ•Ô∏è Widget Deployment: Issues detected\n"
          fi
          
          if [ -z "$status_summary" ]; then
            status_summary="All systems operational"
          fi
          
          webhook_payload='{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "IT-ERA Production Monitoring Alert",
            "themeColor": "${{ steps.evaluate.outputs.alert_color }}",
            "sections": [{
              "activityTitle": "'"$alert_emoji"' IT-ERA Production System Status",
              "activitySubtitle": "Status: '"$alert_status"'",
              "facts": [
                {"name": "ü§ñ Chatbot API:", "value": "${{ needs.rapid-health-check.outputs.chatbot_status }}"},
                {"name": "üìß Email API:", "value": "${{ needs.rapid-health-check.outputs.email_status }}"},
                {"name": "‚ö° Response Times:", "value": "${{ needs.rapid-health-check.outputs.response_times }}"},
                {"name": "üîç Functionality:", "value": "${{ needs.chatbot-availability.result == 'success' && 'OK' || 'Check Required' }}"},
                {"name": "üö® Emergency System:", "value": "${{ needs.emergency-system-test.result == 'success' && 'OK' || 'Check Required' }}"},
                {"name": "üñ•Ô∏è Widget Deploy:", "value": "${{ needs.widget-deployment-check.result == 'success' && 'OK' || 'Check Required' }}"},
                {"name": "üìÖ Timestamp:", "value": "'"$timestamp"'"},
                {"name": "üéØ Alert Level:", "value": "${{ env.ALERT_LEVEL }}"}
              ],
              "text": "'"$status_summary"'"
            }],
            "potentialAction": [{
              "@type": "OpenUri",
              "name": "View Details",
              "targets": [{"os": "default", "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]
            }]
          }'
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$webhook_payload" \
            "${{ env.TEAMS_WEBHOOK }}"

      - name: üìà Update Monitoring Metrics
        run: |
          echo "üìä Recording monitoring metrics..."
          
          # Create metrics summary
          cat > monitoring-metrics.json << EOF
          {
            "timestamp": "$(date -u -Iseconds)",
            "overall_health": "${{ needs.rapid-health-check.outputs.overall_health }}",
            "chatbot_status": "${{ needs.rapid-health-check.outputs.chatbot_status }}",
            "email_status": "${{ needs.rapid-health-check.outputs.email_status }}",
            "response_times": "${{ needs.rapid-health-check.outputs.response_times }}",
            "functionality_test": "${{ needs.chatbot-availability.result }}",
            "emergency_system_test": "${{ needs.emergency-system-test.result }}",
            "widget_deployment_test": "${{ needs.widget-deployment-check.result }}",
            "alert_level": "${{ env.ALERT_LEVEL }}",
            "github_run_id": "${{ github.run_id }}"
          }
          EOF
          
          echo "üìä Metrics recorded successfully"

      - name: üíæ Archive Monitoring Results
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-results-${{ github.run_number }}
          path: monitoring-metrics.json
          retention-days: 7