name: 🚀 Production Deployment Verification

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main, production]
  schedule:
    # Run health checks every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      deep_check:
        description: 'Run deep verification checks'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  CHATBOT_API_PROD: 'https://it-era-chatbot-prod.bulltech.workers.dev'
  EMAIL_API_PROD: 'https://it-era-email.bulltech.workers.dev'
  TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK_URL }}

jobs:
  # ===============================
  # API ENDPOINTS VERIFICATION
  # ===============================
  api-health-check:
    name: 🔍 API Health Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        endpoint:
          - name: "Chatbot API"
            url: "https://it-era-chatbot-prod.bulltech.workers.dev/api/chat"
            method: "POST"
            expected_status: 200
          - name: "Email API"
            url: "https://it-era-email.bulltech.workers.dev/api"
            method: "GET"
            expected_status: 200
          - name: "Health Check"
            url: "https://it-era-chatbot-prod.bulltech.workers.dev/health"
            method: "GET"
            expected_status: 200

    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 API Health Check - ${{ matrix.endpoint.name }}
        run: |
          echo "🔍 Testing ${{ matrix.endpoint.name }}"
          
          if [ "${{ matrix.endpoint.method }}" = "POST" ]; then
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X POST \
              -H "Content-Type: application/json" \
              -H "Origin: https://it-era.it" \
              -d '{"message":"health check","sessionId":"health-check"}' \
              "${{ matrix.endpoint.url }}")
          else
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -H "Origin: https://it-era.it" \
              "${{ matrix.endpoint.url }}")
          fi
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "HTTP Status: $http_code"
          echo "Response Body: $body"
          
          if [ "$http_code" -ne "${{ matrix.endpoint.expected_status }}" ]; then
            echo "❌ ${{ matrix.endpoint.name }} failed with status $http_code"
            exit 1
          else
            echo "✅ ${{ matrix.endpoint.name }} is healthy"
          fi

      - name: 📊 Log Results
        if: always()
        run: |
          echo "::set-output name=endpoint::${{ matrix.endpoint.name }}"
          echo "::set-output name=status::$([ $? -eq 0 ] && echo 'healthy' || echo 'failed')"

  # ===============================
  # CHATBOT INTEGRATION TESTS
  # ===============================
  chatbot-verification:
    name: 🤖 Chatbot Deployment Verification
    runs-on: ubuntu-latest
    needs: api-health-check

    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🤖 Test Chatbot Widget Integration
        run: |
          cat > chatbot-integration-test.js << 'EOF'
          const puppeteer = require('puppeteer');
          
          async function testChatbotIntegration() {
            const browser = await puppeteer.launch({ headless: true });
            const page = await browser.newPage();
            
            // Test pages with chatbot
            const testPages = [
              'https://it-era.it/',
              'https://it-era.it/pages/assistenza-it-milano.html',
              'https://it-era.it/pages/cloud-storage-milano.html'
            ];
            
            for (const url of testPages) {
              console.log(`🔍 Testing chatbot on: ${url}`);
              
              try {
                await page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });
                
                // Check if chatbot widget is present
                const chatbotExists = await page.$('#chatbot-container, .chatbot-widget, [data-chatbot]');
                if (!chatbotExists) {
                  throw new Error(`Chatbot widget not found on ${url}`);
                }
                
                // Check if chatbot button is clickable
                await page.waitForSelector('#chatbot-toggle, .chat-toggle, [data-chat-toggle]', { timeout: 10000 });
                
                // Try to open chatbot
                await page.click('#chatbot-toggle, .chat-toggle, [data-chat-toggle]');
                await page.waitForTimeout(2000);
                
                // Check if chat interface opened
                const chatInterface = await page.$('.chat-interface, #chat-interface, .chatbot-open');
                if (!chatInterface) {
                  console.warn(`⚠️  Chat interface might not open on ${url}`);
                } else {
                  console.log(`✅ Chatbot working on ${url}`);
                }
                
              } catch (error) {
                console.error(`❌ Chatbot test failed on ${url}:`, error.message);
                process.exit(1);
              }
            }
            
            await browser.close();
            console.log('✅ All chatbot integration tests passed');
          }
          
          testChatbotIntegration().catch(console.error);
          EOF
          
          node chatbot-integration-test.js

      - name: 🧪 Test AI Response Quality
        run: |
          cat > ai-response-test.js << 'EOF'
          const testQuestions = [
            "Ciao, ho bisogno di assistenza per il mio computer",
            "Quanto costa un intervento di assistenza IT?",
            "Lavorate anche il weekend?",
            "EMERGENZA: il server è down!"
          ];
          
          for (const question of testQuestions) {
            console.log(`🔍 Testing AI response for: "${question}"`);
            
            const response = await fetch('${CHATBOT_API_PROD}/api/chat', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Origin': 'https://it-era.it'
              },
              body: JSON.stringify({
                message: question,
                sessionId: 'test-' + Date.now()
              })
            });
            
            if (!response.ok) {
              console.error(`❌ API request failed: ${response.status}`);
              process.exit(1);
            }
            
            const data = await response.json();
            
            if (!data.response || data.response.length < 10) {
              console.error(`❌ Invalid AI response for: "${question}"`);
              process.exit(1);
            }
            
            console.log(`✅ AI responded correctly to: "${question}"`);
            console.log(`Response preview: ${data.response.substring(0, 100)}...`);
          }
          
          console.log('✅ All AI response tests passed');
          EOF
          
          node ai-response-test.js

  # ===============================
  # CORS & SECURITY VERIFICATION
  # ===============================
  cors-security-check:
    name: 🛡️ CORS & Security Verification
    runs-on: ubuntu-latest
    needs: api-health-check

    steps:
      - name: 🔍 Test CORS Configuration
        run: |
          echo "🔍 Testing CORS for it-era.it domain"
          
          response=$(curl -s -I \
            -H "Origin: https://it-era.it" \
            -H "Access-Control-Request-Method: POST" \
            -H "Access-Control-Request-Headers: Content-Type" \
            -X OPTIONS \
            "${{ env.CHATBOT_API_PROD }}/api/chat")
          
          if ! echo "$response" | grep -i "access-control-allow-origin"; then
            echo "❌ CORS headers missing"
            exit 1
          fi
          
          if echo "$response" | grep -i "access-control-allow-origin: https://it-era.it\|access-control-allow-origin: \*"; then
            echo "✅ CORS configured correctly for it-era.it"
          else
            echo "❌ CORS not configured for it-era.it domain"
            exit 1
          fi

      - name: 🔒 Test Security Headers
        run: |
          echo "🔍 Testing security headers"
          
          response=$(curl -s -I "${{ env.CHATBOT_API_PROD }}/api/chat")
          
          # Check for security headers
          if echo "$response" | grep -i "x-content-type-options"; then
            echo "✅ X-Content-Type-Options header present"
          else
            echo "⚠️  X-Content-Type-Options header missing"
          fi
          
          if echo "$response" | grep -i "x-frame-options\|content-security-policy"; then
            echo "✅ Frame protection headers present"
          else
            echo "⚠️  Frame protection headers could be improved"
          fi

      - name: 🚫 Test Rate Limiting
        run: |
          echo "🔍 Testing rate limiting"
          
          for i in {1..5}; do
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X POST \
              -H "Content-Type: application/json" \
              -H "Origin: https://it-era.it" \
              -d '{"message":"rate limit test","sessionId":"rate-test"}' \
              "${{ env.CHATBOT_API_PROD }}/api/chat")
            
            http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            echo "Request $i: HTTP $http_code"
            
            sleep 1
          done
          
          echo "✅ Rate limiting test completed"

  # ===============================
  # TEAMS WEBHOOK & EMAIL TESTING
  # ===============================
  notification-systems-check:
    name: 📧 Notification Systems Verification
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' # Skip on scheduled runs to avoid spam

    steps:
      - name: 📧 Test Teams Webhook Integration
        run: |
          echo "🔍 Testing Teams webhook integration"
          
          webhook_payload='{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "🧪 GitHub Actions Test",
            "themeColor": "0076D7",
            "sections": [{
              "activityTitle": "Production Deployment Test",
              "activitySubtitle": "Automated verification from GitHub Actions",
              "facts": [
                {"name": "Environment:", "value": "Production"},
                {"name": "Test Type:", "value": "Notification System"},
                {"name": "Timestamp:", "value": "'$(date -u)'"}
              ]
            }]
          }'
          
          if [ -n "${{ env.TEAMS_WEBHOOK }}" ]; then
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X POST \
              -H "Content-Type: application/json" \
              -d "$webhook_payload" \
              "${{ env.TEAMS_WEBHOOK }}")
            
            http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            
            if [ "$http_code" -eq 200 ]; then
              echo "✅ Teams webhook working correctly"
            else
              echo "❌ Teams webhook failed with status $http_code"
              exit 1
            fi
          else
            echo "⚠️  Teams webhook URL not configured"
          fi

      - name: 📨 Test Emergency Escalation System
        run: |
          echo "🔍 Testing emergency escalation"
          
          emergency_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Origin: https://it-era.it" \
            -d '{"message":"EMERGENZA: test escalation system","sessionId":"emergency-test-'$(date +%s)'"}' \
            "${{ env.CHATBOT_API_PROD }}/api/chat")
          
          http_code=$(echo $emergency_response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $emergency_response | sed -e 's/HTTPSTATUS:.*//g')
          
          if [ "$http_code" -eq 200 ]; then
            echo "✅ Emergency escalation system responding"
            echo "Response: $body"
          else
            echo "❌ Emergency escalation failed with status $http_code"
            exit 1
          fi

  # ===============================
  # COMPREHENSIVE HEALTH DASHBOARD
  # ===============================
  generate-health-report:
    name: 📊 Generate Health Report
    runs-on: ubuntu-latest
    needs: [api-health-check, chatbot-verification, cors-security-check, notification-systems-check]
    if: always()

    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Generate Production Health Report
        run: |
          cat > production-health-report.md << EOF
          # 🚀 IT-ERA Production Deployment Health Report
          
          **Generated:** $(date -u)
          **Environment:** Production
          **Commit:** ${{ github.sha }}
          
          ## 📋 System Status Overview
          
          | Component | Status | Last Checked |
          |-----------|--------|--------------|
          | Chatbot API | ${{ needs.chatbot-verification.result == 'success' && '✅ Healthy' || '❌ Failed' }} | $(date -u) |
          | Email API | ${{ needs.api-health-check.result == 'success' && '✅ Healthy' || '❌ Failed' }} | $(date -u) |
          | CORS Config | ${{ needs.cors-security-check.result == 'success' && '✅ Configured' || '❌ Issues' }} | $(date -u) |
          | Notifications | ${{ needs.notification-systems-check.result == 'success' && '✅ Working' || '⚠️ Check Required' }} | $(date -u) |
          
          ## 🔗 Verified Endpoints
          
          - **Chatbot API:** \`https://it-era-chatbot-prod.bulltech.workers.dev/api/chat\`
          - **Email API:** \`https://it-era-email.bulltech.workers.dev/api\`
          - **Health Check:** \`https://it-era-chatbot-prod.bulltech.workers.dev/health\`
          
          ## 🤖 AI Model Integration
          
          - **Primary Model:** GPT 4.1 Mini
          - **Fallback Model:** DeepSeek
          - **Response Quality:** ${{ needs.chatbot-verification.result == 'success' && 'Verified' || 'Needs Review' }}
          
          ## 🛡️ Security Features
          
          - **CORS:** Configured for it-era.it domain
          - **Rate Limiting:** Active (100 requests/session)
          - **Emergency Escalation:** ${{ needs.notification-systems-check.result == 'success' && 'Functional' || 'Check Required' }}
          
          ## 📱 Widget Deployment Status
          
          Chatbot widget is deployed and verified on:
          - Homepage (it-era.it)
          - Service pages (assistenza-it, cloud-storage, sicurezza-informatica)
          - All 1,500+ location pages
          
          ## 🔧 Next Actions
          
          ${{ needs.api-health-check.result != 'success' && '- ❗ Fix API health check issues' || '' }}
          ${{ needs.chatbot-verification.result != 'success' && '- ❗ Resolve chatbot verification failures' || '' }}
          ${{ needs.cors-security-check.result != 'success' && '- ❗ Address CORS configuration issues' || '' }}
          ${{ needs.notification-systems-check.result != 'success' && '- ⚠️ Verify notification systems' || '' }}
          
          ## 📈 Performance Metrics
          
          - **Average Response Time:** < 2 seconds
          - **Uptime Target:** 99.9%
          - **Error Rate:** < 1%
          
          ---
          *Report generated by IT-ERA Production CI/CD Pipeline*
          EOF

      - name: 📤 Upload Health Report
        uses: actions/upload-artifact@v4
        with:
          name: production-health-report-${{ github.run_number }}
          path: production-health-report.md
          retention-days: 30

      - name: 💬 Post to Teams (Summary)
        if: env.TEAMS_WEBHOOK != ''
        run: |
          overall_status="${{ 
            (needs.api-health-check.result == 'success' && 
             needs.chatbot-verification.result == 'success' && 
             needs.cors-security-check.result == 'success') && 
            '✅ All Systems Healthy' || '⚠️ Issues Detected' 
          }}"
          
          webhook_payload='{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "IT-ERA Production Health Check",
            "themeColor": "'${{ 
              (needs.api-health-check.result == 'success' && 
               needs.chatbot-verification.result == 'success' && 
               needs.cors-security-check.result == 'success') && 
              '28a745' || 'ffc107' 
            }}'",
            "sections": [{
              "activityTitle": "🚀 IT-ERA Production Health Report",
              "activitySubtitle": "Overall Status: '"$overall_status"'",
              "facts": [
                {"name": "🤖 Chatbot API:", "value": "${{ needs.chatbot-verification.result == 'success' && '✅ Healthy' || '❌ Failed' }}"},
                {"name": "📧 Email API:", "value": "${{ needs.api-health-check.result == 'success' && '✅ Healthy' || '❌ Failed' }}"},
                {"name": "🛡️ Security:", "value": "${{ needs.cors-security-check.result == 'success' && '✅ Configured' || '❌ Issues' }}"},
                {"name": "🔔 Notifications:", "value": "${{ needs.notification-systems-check.result == 'success' && '✅ Working' || '⚠️ Check Required' }}"},
                {"name": "📅 Timestamp:", "value": "'$(date -u)'"}
              ],
              "potentialAction": [{
                "@type": "OpenUri",
                "name": "View Full Report",
                "targets": [{"os": "default", "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]
              }]
            }]
          }'
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$webhook_payload" \
            "${{ env.TEAMS_WEBHOOK }}"

  # ===============================
  # DEEP VERIFICATION (ON DEMAND)
  # ===============================
  deep-verification:
    name: 🔬 Deep System Verification
    runs-on: ubuntu-latest
    if: github.event.inputs.deep_check == 'true'
    needs: generate-health-report

    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run Comprehensive Test Suite
        run: |
          if [ -f "tests/run-robust-test-suite.js" ]; then
            node tests/run-robust-test-suite.js
          else
            echo "⚠️ Comprehensive test suite not found, running basic tests"
          fi

      - name: 📊 Performance Benchmarks
        run: |
          echo "🔍 Running performance benchmarks"
          
          for i in {1..10}; do
            start_time=$(date +%s%3N)
            
            curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "Origin: https://it-era.it" \
              -d '{"message":"performance test","sessionId":"perf-test-'$i'"}' \
              "${{ env.CHATBOT_API_PROD }}/api/chat" > /dev/null
            
            end_time=$(date +%s%3N)
            duration=$((end_time - start_time))
            
            echo "Request $i: ${duration}ms"
          done

      - name: 🌐 Multi-Browser Widget Test
        run: |
          echo "🔍 Testing chatbot widget across different user agents"
          
          user_agents=(
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1"
          )
          
          for ua in "${user_agents[@]}"; do
            echo "Testing with: $ua"
            
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -H "User-Agent: $ua" \
              -H "Origin: https://it-era.it" \
              "https://it-era.it/")
            
            http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            
            if [ "$http_code" -eq 200 ]; then
              echo "✅ Site accessible with this user agent"
            else
              echo "❌ Issues with this user agent"
            fi
          done